{
    "key": "Start_scan_cycle_0.1.0_3_1751993103875",
    "projectType": "Blank",
    "projectGroup": null,
    "templateInfo": {
        "type": "Blank",
        "title": "Blank",
        "category": null,
        "group": null,
        "dartPackageInfo": {
            "title": "",
            "group": "",
            "type": "",
            "category": ""
        }
    },
    "packageName": "com.optimax.startscancycle",
    "ideMode": "basic",
    "UserCommand": false,
    "projectConfigFile": {
        ".eslintignore": "node_modules\npublic\nlib\nsrc/buc\nsrc/BUC",
        ".eslintrc": "{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true,\n    \"jest\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:prettier/recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"tsx\": true,\n      \"ts\": true,\n      \"jsx\": true,\n      \"js\": true\n    },\n    \"ecmaVersion\": \"latest\",\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\n    \"react\",\n    \"@typescript-eslint\"\n  ],\n  \"settings\": {\n    \"react\": {\n      \"version\": \"detect\"\n    }\n  },\n  \"rules\": {\n    \"indent\": [\n      \"error\",\n      2\n    ],\n    \"quotes\": [\n      \"error\",\n      \"single\",\n      {\n        \"avoidEscape\": true,\n        \"allowTemplateLiterals\": true\n      }\n    ],\n    \"semi\": [\n      \"error\",\n      \"always\"\n    ],\n    \"eol-last\": [\n      \"error\",\n      \"always\"\n    ],\n    \"arrow-spacing\": [\n      \"error\",\n      {\n        \"before\": true,\n        \"after\": true\n      }\n    ],\n    \"block-spacing\": [\n      \"error\",\n      \"always\"\n    ],\n    \"brace-style\": [\n      \"error\",\n      \"1tbs\"\n    ],\n    \"comma-spacing\": [\n      \"error\",\n      {\n        \"before\": false,\n        \"after\": true\n      }\n    ],\n    \"no-unused-vars\": \"off\",\n    \"space-before-function-paren\": [\n      \"error\",\n      {\n        \"anonymous\": \"always\",\n        \"named\": \"never\",\n        \"asyncArrow\": \"always\"\n      }\n    ],\n    \"default-case-last\": \"error\",\n    \"eqeqeq\": [\n      \"error\",\n      \"always\",\n      {\n        \"null\": \"ignore\"\n      }\n    ],\n    \"func-call-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"key-spacing\": [\n      \"error\",\n      {\n        \"beforeColon\": false,\n        \"afterColon\": true\n      }\n    ],\n    \"keyword-spacing\": [\n      \"error\",\n      {\n        \"before\": true,\n        \"after\": true\n      }\n    ],\n    \"no-console\": [\n      \"error\",\n      {\n        \"allow\": [\n          \"warn\",\n          \"error\"\n        ]\n      }\n    ],\n    \"comma-dangle\": [\n      \"error\",\n      \"always-multiline\"\n    ],\n    \"@typescript-eslint/no-unused-vars\": [\"error\",\n      { \n        \"argsIgnorePattern\": \"^_$\",\n        \"varsIgnorePattern\": \"^_$\",\n        \"caughtErrorsIgnorePattern\": \"^_$\"\n      }\n    ],\n    \"@typescript-eslint/no-var-requires\": \"error\",\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    \"react/prop-types\": \"off\"\n  }\n}",
        ".gitignore": "# dependencies\n/node_modules\n\n/package-lock.json\n\n/build\n\n/test-coverage\n\n/output\n\n.scannerwork",
        ".prettierrc": "{\n  \"trailingComma\": \"all\",\n  \"quoteProps\": \"preserve\",\n  \"tabWidth\": 2,\n  \"semi\": true,\n  \"singleQuote\": true\n}",
        "tsconfig.json": "{\n\t\"compilerOptions\": {\n\t\t\"target\": \"es5\",\n\t\t\"jsx\": \"react\",\n\t\t\"module\": \"commonjs\",\n\t\t\"resolveJsonModule\": true,\n\t\t\"esModuleInterop\": true,\n\t\t\"forceConsistentCasingInFileNames\": true,\n\t\t\"strict\": true,\n\t\t\"skipLibCheck\": true\n\t}\n}",
        "webpack.config.js": "/* eslint-disable no-undef */\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst path = require('path');\nconst fs = require('fs-extra');\nconst AdmZip = require('adm-zip');\nconst {EsbuildPlugin} = require('esbuild-loader')\nconst WebpackObfuscator = require('webpack-obfuscator');\n\n// initialize manifest.json for root\nconst rootManifestFileName = 'manifest.json';\nconst rootManifest = require(`../${rootManifestFileName}`);\nconst packageJson = require(`./package.json`);\nconst packageName = rootManifest.packageName;\nconst assetDir = 'assets';\nconst drscModulePkgFileName = rootManifest.drscModulePackageFile;\nconst drcfModulePkgFileName = rootManifest.drcfModulePackageFile;\n\n// initialize manifest.json for DART-Platform\nconst manifestFileName = 'manifest.json';\nconst manifest = require(`./${manifestFileName}`);\n\n// initialize misc.\nconst rootDir = path.join(__dirname, '../');\nconst buildDir = path.join(__dirname, 'build');\nconst buildPkgDir = path.join(buildDir, packageName);\nconst outputDir = path.join(__dirname, 'output');\nconst outputPkgDir = path.join(outputDir, packageName);\nfunction move(fileName, fromDir, toDir) {\n  if (\n    fileName &&\n    fileName.trim().length > 0 &&\n    fs.existsSync(path.join(fromDir, fileName))\n  ) {\n    fs.moveSync(path.join(fromDir, fileName), path.join(toDir, fileName));\n  }\n}\n\nfunction copy(fileName, fromDir, toDir) {\n  if (\n    fileName &&\n    fileName.trim().length > 0 &&\n    fs.existsSync(path.join(fromDir, fileName))\n  ) {\n    fs.copySync(path.join(fromDir, fileName), path.join(toDir, fileName));\n  }\n}\n\nfunction copyToDirPath(fileName, fromDir, toDirPath) {\n  if (\n    fileName &&\n    fileName.trim().length > 0 &&\n    fs.existsSync(path.join(fromDir, fileName))\n  ) {\n    fs.copySync(path.join(fromDir, fileName), toDirPath);\n  }\n}\n\nfunction remove(fileName, fromDir) {\n  if (\n    fileName &&\n    fileName.trim().length > 0 &&\n    fs.existsSync(path.join(fromDir, fileName))\n  ) {\n    fs.removeSync(path.join(fromDir, fileName));\n  }\n}\n\nclass PackagingModulePackage {\n  async packDrscModulePackage() {\n    // Add udrf to module - Start\n    if (packageJson.dependencies && packageJson.dependencies['dart-sdk']) {\n      const sdkPathMatchResult =\n        packageJson.dependencies['dart-sdk'].match('(?<=file:/).+');\n      if (sdkPathMatchResult) {\n        copyToDirPath(\n          '/src/urdf',\n          sdkPathMatchResult[0],\n          path.join(buildPkgDir, 'urdf'),\n        );\n      }\n    }\n    // Add udrf to module - End\n    copyToDirPath('src/assets', __dirname, path.join(buildPkgDir, 'assets'));\n    copy(manifestFileName, __dirname, buildPkgDir);\n\n    const zip = new AdmZip();\n    zip.addLocalFolder(buildPkgDir);\n    const dstName = path.join(buildDir, drscModulePkgFileName);\n    await zip\n      .writeZipPromise(dstName, null)\n      .then(() => {\n        console.log(`Successfully compress ${buildPkgDir} to ${dstName}.`);\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  }\n\n  async packTotalModulePackage() {\n    copy(assetDir, rootDir, outputPkgDir);\n    copy(rootManifestFileName, rootDir, outputPkgDir);\n    copy(drscModulePkgFileName, buildDir, outputPkgDir);\n    copy(drcfModulePkgFileName, rootDir, outputPkgDir);\n\n    const zip = new AdmZip();\n    zip.addLocalFolder(outputPkgDir);\n    const dstName = path.join(\n      outputDir,\n      `${packageName}_${rootManifest.version}.dm`,\n    );\n    await zip\n      .writeZipPromise(dstName, null)\n      .then(() => {\n        remove(packageName, outputDir);\n        move(`${packageName}.dm`, outputDir, outputPkgDir);\n        console.log(`Successfully compress ${outputPkgDir} to ${dstName}.`);\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  }\n\n  apply(compiler) {\n    compiler.hooks.beforeCompile.tap('PackagingModulePackage', (_) => {\n      // remove(packageName, buildDir);\n      remove(packageName, outputDir);\n      remove(`${packageName}.dm`, outputDir);\n    });\n    compiler.hooks.done.tap('PackagingModulePackage', async (_) => {\n      await this.packDrscModulePackage()\n        .then(async () => await this.packTotalModulePackage())\n        .catch((e) => console.error(e));\n    });\n  }\n}\n\nmodule.exports = {\n  entry: {\n    bundle: './src/index.tsx',\n  },\n  output: {\n    path: buildPkgDir,\n    filename: manifest.main,\n  },\n  resolve: {\n    extensions: [\n      '.js',\n      'jsx',\n      '.ts',\n      '.tsx',\n      'mjs',\n      'mjsx',\n      'css',\n      'scss',\n      'sass',\n      'svg',\n      'json',\n    ],\n  },\n  plugins: [\n    new PackagingModulePackage(),\n    new WebpackObfuscator({rotateStringArray: true})\n  ],\n  optimization: {\n    minimizer: [\n      new EsbuildPlugin({\n        target: 'es2015'  // Syntax to transpile to (see options below for possible values)\n      })\n    ]\n  },\n  module: {\n    rules: [\n      // {\n      //   test: /\\.(m?jsx?)|(tsx?)$/,\n      //   use: [\n      //     {\n      //       loader: 'babel-loader',\n      //       options: {\n      //         presets: [\n      //           '@babel/preset-env',\n      //           '@babel/preset-react',\n      //           '@babel/preset-typescript',\n      //         ],\n      //       },\n      //     },\n      //   ],\n      //   exclude: /((node_modules\\/(?!(dart-api)\\/).*)|(bower_components))/,\n      // }, \n      {\n        test: /\\.[t]sx?$/,\n        loader: 'esbuild-loader',\n        options: {\n          target: 'es2015',\n        },\n      },\n      {\n        test: /\\.(c|sc|sa)ss$/,\n        use: [\n          {\n            loader: \"style-loader\",\n            options: {\n              attributes: {\n                id: `module_${packageName}`\n              }\n            }\n          },\n          {\n            loader: \"css-loader\",\n            options: {\n              modules: {\n                localIdentHashSalt: `module_${packageName}`\n              }\n            }\n          },\n          \"sass-loader\"\n        ]\n      },\n      {\n        test: /\\.(png|jpe?g|gif)$/i,\n        type: 'asset/resource',\n        generator: {\n          filename: 'assets/images/[name][ext]',\n        },\n      },\n      {\n        test: /\\.svg$/i,\n        type: 'asset',\n        resourceQuery: /url/, // *.svg?url\n      },\n      {\n        test: /\\.svg$/i,\n        issuer: /\\.[jt]sx?$/,\n        resourceQuery: { not: [/url/] }, // exclude react component if *.svg?url\n        use: ['@svgr/webpack'],\n      },\n      {\n        test: /\\.json$/,\n        use: ['json-loader'],\n        type: 'javascript/auto',\n      },\n      {\n        test: /\\.*$/i,\n        type: 'asset/resource',\n        exclude: /\\.((m?jsx?)|(tsx?)|(c|sc|sa)ss|(svg)|(json))$/,\n        generator: {\n          filename: `assets/[path][name][ext]`,\n        },\n      },\n    ],\n  },\n};\n"
    }
}