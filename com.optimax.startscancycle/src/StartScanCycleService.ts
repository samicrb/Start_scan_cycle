/*
    BSD 3-Clause License
    Copyright (c) 2023, Doosan Robotics Inc.
*/
import {
  Context, ModuleService, IModuleChannel,
  IProgramManager, ProgramSaveMode, Message, IDartFileSystem
} from "dart-api";

import programDrl from "./UserCommand/start_scan_cycle.drl";

export default class StartScanCycleService extends ModuleService {

    onBind(msg: Message, ch: IModuleChannel): boolean {
        const pm = this.moduleContext.getSystemManager(Context.PROGRAM_MANAGER) as IProgramManager;
        const fileSystem = this.moduleContext.getSystemLibrary(Context.DART_FILE_SYSTEM) as IDartFileSystem;

        /*********
        *   1. Event "req_to_save_commands_def_as_sub_program"
        *   Define and save Sub Program Function
        *   componentId : Screen component Id. Write in mainfest.json
        *   programName : The program name created by the taskeditor. It will automatically generated by the task editor.
        *********/
        /* 1. Sub-Program : un seul enregistrement par tâche */
        ch.receive("req_to_save_commands_def_as_sub_program",
            async ({ programName }) => {
                const code = await fileSystem.readFile(this.moduleContext, programDrl);
                const ok = await pm.saveSubProgram(ProgramSaveMode.SAVE, programName, code);
                ch.send("req_to_save_commands_def_as_sub_program", ok);
        });
        
        /*********
        *   2. Event "gen_command_call"
        *   Define function execute statement and send it to Task Editor
        *   componentId : Screen component Id. Write in mainfest.json
        *   data : Saved data. Received by PiP Screen.
        *********/
        /* 2. Appel du bloc (aucun paramètre) */
        ch.receive("gen_command_call", ({ componentId }) => {
            if (componentId === "start_scan_cycle") {
                ch.send("gen_command_call", "start_scan_cycle();");}
            });

        return true;
    }
}
